x <- 0:30 ; plot(x, dbinom(x, 30, 0.5), type = "h")
x
x <- 0:30 ; plot(x, dbinom(x, 30, 1.5), type = "h")
x <- 0:30 ; plot(x, dbinom(x, 30, 0.2), type = "h")
x <- 0:30 ; plot(x, dbinom(x, 30, 0.1), type = "h")
library(UsingR); data(galton); library(reshape); long <- melt(galton)
g <- ggplot(long, aes(x = value, fill = variable))
g <- g + geom_histogram(colour = "black", binwidth=1)
g <- g + facet_grid(. ~ variable)
g
install.packages("UsingR")
library(manipulate)
myHist <- function(mu){
mse <- mean((galton$child - mu)^2)
g <- ggplot(galton, aes(x = child)) + geom_histogram(fill = "salmon", colour = "black", binwidth=1)
g <- g + geom_vline(xintercept = mu, size = 3)
g <- g + ggtitle(paste("mu = ", mu, ", MSE = ", round(mse, 2), sep = ""))
g
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(UsingR); data(galton); library(reshape); long <- melt(galton)
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(UsingR); data(galton); library(reshape); long <- melt(galton)
g <- ggplot(long, aes(x = value, fill = variable))
install.packages("ggplot2")
library(UsingR); data(galton); library(reshape); long <- melt(galton)
g <- ggplot(long, aes(x = value, fill = variable))
library(ggplot)
library(ggplot)
g <- ggplot2(long, aes(x = value, fill = variable))
---
title       : Introduction to regression
subtitle    : Regression
author      : Brian Caffo, Jeff Leek and Roger Peng
job         : Johns Hopkins Bloomberg School of Public Health
highlighter : highlight.js  # {highlight.js, prettify, highlight}
hitheme     : tomorrow      #
url:
lib: ../../librariesNew
assets: ../../assets
widgets     : [mathjax]            # {mathjax, quiz, bootstrap}
mode        : selfcontained # {standalone, draft}
library(UsingR); data(galton); library(reshape); long <- melt(galton)
g <- ggplot(long, aes(x = value, fill = variable))
library(ggplot2)
g <- ggplot(long, aes(x = value, fill = variable))
g <- g + geom_histogram(colour = "black", binwidth=1)
g <- g + facet_grid(. ~ variable)
g
library(manipulate)
myHist <- function(mu){
mse <- mean((galton$child - mu)^2)
g <- ggplot(galton, aes(x = child)) + geom_histogram(fill = "salmon", colour = "black", binwidth=1)
g <- g + geom_vline(xintercept = mu, size = 3)
g <- g + ggtitle(paste("mu = ", mu, ", MSE = ", round(mse, 2), sep = ""))
g
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
ggplot(galton, aes(x = parent, y = child)) + geom_point()
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
myPlot <- function(beta){
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g <- g + geom_abline(intercept = 0, slope = beta, size = 3)
mse <- mean( (y - beta * x) ^2 )
g <- g + ggtitle(paste("beta = ", beta, "mse = ", round(mse, 3)))
g
}
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
myPlot <- function(beta){
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g <- g + geom_abline(intercept = 0, slope = beta, size = 3)
mse <- mean( (y - beta * x) ^2 )
g <- g + ggtitle(paste("beta = ", beta, "mse = ", round(mse, 3)))
g
}
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
data(freqData)
freq=freqData["freq"]
freq
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
freq=freqData["freq"]
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
myPlot <- function(beta){
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g <- g + geom_abline(intercept = 0, slope = beta, size = 3)
mse <- mean( (y - beta * x) ^2 )
g <- g + ggtitle(paste("beta = ", beta, "mse = ", round(mse, 3)))
g
}
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
freqData$parent <- as.numeric(as.character(freqData$parent))
myPlot <- function(beta){
freqData$child <- as.numeric(as.character(freqData$child))
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g <- g + geom_abline(intercept = 0, slope = beta, size = 3)
mse <- mean( (y - beta * x) ^2 )
g <- g + ggtitle(paste("beta = ", beta, "mse = ", round(mse, 3)))
g
}
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
myPlot <- function(beta){
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g <- g + geom_abline(intercept = 0, slope = beta, size = 3)
mse <- mean( (y - beta * x) ^2 )
g <- g + ggtitle(paste("beta = ", beta, "mse = ", round(mse, 3)))
g
}
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
myPlot <- function(beta){
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch=21,col = "black", bg ="lightblue",
cex= .15 * freqData$freq,
xlab="parent",
ylab="child"
)
abline(0,beta,lwd=3)
points(0,0,cex=2,pch=19)
mse=mean((y-beta * x)^2)
title(paste("beta"=beta,"mse=",round (mse,3)))
}
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
lm(I(child - mean(child))~ I(parent - mean(parent)) - 1, data = galton)
y <- galton$child
x <- galton$parent
beta1 <- cor(y, x) *  sd(y) / sd(x)
beta0 <- mean(y) - beta1 * mean(x)
library(galton)
library(UsingR); data(galton)
y <- galton$child
x <- galton$parent
beta1 <- cor(y, x) *  sd(y) / sd(x)
beta0 <- mean(y) - beta1 * mean(x)
rbind(c(beta0, beta1), coef(lm(y ~ x)))
yc <- y - mean(y)
xc <- x - mean(x)
beta1 <- sum(yc * xc) / sum(xc ^ 2)
c(beta1, coef(lm(y ~ x))[2])
library(UsingR)
data(father.son)
y <- (father.son$sheight - mean(father.son$sheight)) / sd(father.son$sheight)
x <- (father.son$fheight - mean(father.son$fheight)) / sd(father.son$fheight)
rho <- cor(x, y)
myPlot <- function(x, y) {
plot(x, y,
xlab = "Father's height, normalized",
ylab = "Son's height, normalized",
xlim = c(-3, 3), ylim = c(-3, 3),
bg = "lightblue", col = "black", cex = 1.1, pch = 21,
frame = FALSE)
}
```
---
## Plot the data, code
```
myPlot(x, y)
abline(0, 1) # if there were perfect correlation
abline(0, rho, lwd = 2) # father predicts son
abline(0, 1 / rho, lwd = 2) # son predicts father, son on vertical axis
abline(h = 0); abline(v = 0) # reference lines for no relathionship
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
mu <- sum(w*x)/sum(w)
round(mu,4)
lm(x ~ 1, weights = w)$coefficients
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ 0 + x)$coefficients
data(mtcars)
lm(mpg ~ wt, data = mtcars)$coefficients
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
hist(x)
xbar = (x - mean(x)) / sd(x)
xbar[1]
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x)$coefficients
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
hist(x)
mean(x)
install.packages("shiny")
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h3('Sidebar text')
),
mainPanel(
h3('Main Panel text')
)
))
library(shiny)
shinyServer(
function(input, output) {
}
)
shinyUI(pageWithSidebar(
headerPanel("Illustrating markup"),
sidebarPanel(
h1('Sidebar panel'),
h1('H1 text'),
h2('H2 Text'),
h3('H3 Text'),
h4('H4 Text')
),
mainPanel(
h3('Main Panel text'),
code('some code'),
p('some ordinary text')
)
))
runExample("01_hello")
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
gplot(myplot)
ggplot(myplot)
plot(myplot)
plot(myPlot)
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
value2<- 70
mean2<- 80
sd2<- 10
answ2<-pnorm(value2, mean2, sd2)
round(answ2, 2)
quantil3<- 0.95
mean3<- 1100
sd3<- 75
answ3<-qnorm(quantil3, mean3, sd3)
round(answ3,0)
1 / sqrt(12 * 1000)
nosim <- 1000
n <- 5
sd(apply(matrix(runif(nosim * n), nosim), 1, 0.10))
mean=0.10
nosim <- 1000
n <- 5
sd(apply(matrix(runif(nosim * n), nosim), 1, mean))
mean=0.75
nosim <- 1000
n <- 5
sd(apply(matrix(runif(nosim * n), nosim), 1, mean))
mean=0.5
nosim <- 1000
n <- 5
sd(apply(matrix(runif(nosim * n), nosim), 1, mean))
mean=0.25
nosim <- 1000
n <- 5
sd(apply(matrix(runif(nosim * n), nosim), 1, mean))
1/12
nosim <- 1000
n <-5
sd(apply(matrix(rpois(nosim * n, 4), nosim), 1, mean))
nosim <- 1000
n <-10
mean=5
sd(apply(matrix(rpois(nosim * n, 3), nosim), 1, mean))
sd(apply(matrix(rpois(nosim * n, 180), nosim), 1, mean))
sd(apply(matrix(rpois(nosim * n, 5), nosim), 1, mean))
install.packages("nutshell")
library(lattice)
library(nutshell)
data(births2006.smpl)
births2006.smpl[1:5,]
DIM(births2006.smpl)
dim(births2006.smpl)
births.dow=table(births2006.smpl$DOB_WK)
hist(births.dow)
births.dow=table(births2006.smpl$DOB_WK)
births.dow
barchart(births.dow,ylab="Day of Week",col="black")
births2006.smpl$DMETH_REC
dob.dm.tbl=table(WK=births2006.smpl$DOB_WK,
MM=births2006.smpl$DMETH_REC)
dob.dm.tbl
dob.dm.tbl=dob.dm.tbl[,-2]
dob.dm.tb
dob.dm.tbl
trellis.device()
barchart(dob.dm.tbl,ylab="Day of Week")
barchart(dob.dm.tbl,horizontal=FALSE,groups=FALSE,
+ xlab="Day of Week",col="black")
barchart(dob.dm.tbl,horizontal=FALSE,groups=FALSE,
xlab="Day of Week",col="black")
+ col="black")
col="black")
histogram(~DBWT|DPLURAL,data=births2006.smpl,layout=c(1,5),col="black")
histogram(~DBWT|DPLURAL,data=births2006.smpl,layout=c(1,5),col="black")
histogram(~DBWT|DMETH_REC,data=births2006.smpl,layout=c(1,3), col="black")
histogram(~DBWT|DPLURAL,data=births2006.smpl,layout=c(1,5),col="black")
histogram(~DBWT|DMETH_REC,data=births2006.smpl,layout=c(1,3), col="black")
densityplot(~DBWT|DPLURAL,data=births2006.smpl,layout=c(1,5),
plot.points=FALSE,col="black")
densityplot(~DBWT,groups=DPLURAL,data=births2006.smpl,
plot.points=FALSE)
dotplot(~DBWT|DPLURAL,data=births2006.smpl,layout=c(1,5),
plot.points=FALSE,col="black")
xyplot(DBWT~DOB_WK,data=births2006.smpl,col="black")
xyplot(DBWT~DOB_WK|DPLURAL,data=births2006.smpl,layout=c(1,5),
col="black")
xyplot(DBWT~WTGAIN,data=births2006.smpl,col="black")
smoothScatter(births2006.smpl$WTGAIN,births2006.smpl$DBWT)
+ xlab="AGPAR5")
boxplot(DBWT~APGAR5,data=births2006.smpl,ylab="DBWT",
xlab="AGPAR5")
boxplot(DBWT~DOB_WK,data=births2006.smpl,ylab="DBWT",
xlab="Day of Week")
## as factors
bwplot(DBWT~factor(APGAR5)|factor(SEX),data=births2006.smpl,
xlab="AGPAR5")
bwplot(DBWT~factor(DOB_WK),data=births2006.smpl,
xlab="Day of Week")
fac=factor(births2006.smpl$DPLURAL)
fac
res=births2006.smpl$DBWT
res
t4=tapply(res,fac,mean,na.rm=TRUE)
t4
t5=tapply(births2006.smpl$DBWT,INDEX=list(births2006.smpl$DPLURAL,
births2006.smpl$SEX),FUN=mean,na.rm=TRUE)
t5
barplot(t4,ylab="DBWT")
barplot(t5,beside=TRUE,ylab="DBWT")
t5=table(births2006.smpl$ESTGEST)
t5
new=births2006.smpl[births2006.smpl$ESTGEST != 99,]
t51=table(new$ESTGEST)
t51
t6=tapply(new$DBWT,INDEX=list(cut(new$WTGAIN,breaks=10),
cut(new$ESTGEST,breaks=10)),FUN=mean,na.rm=TRUE)
t6
levelplot(t6,scales = list(x = list(rot = 90)))
contourplot(t6,scales = list(x = list(rot = 90)))
setwd("C:/Users/compaq/Desktop/courses/cursos/ReproducibleResearch/RepData_PeerAssessment2")
library(R.utils)
storm <- read.csv("repdata-data-StormData.csv",stringsAsFactors=FALSE)
head(storm)
eventHarm = storm[c("EVTYPE", "FATALITIES", "INJURIES", "PROPDMG", "PROPDMGEXP", "CROPDMG", "CROPDMGEXP")]
library(sqldf)
distinctEvtype <- sqldf('SELECT DISTINCT e.EVTYPE FROM "eventHarm" as e ')
distinctFatal <- sqldf('SELECT DISTINCT e.FATALITIES FROM "eventHarm" as e ')
distinctInj <- sqldf('SELECT DISTINCT e.INJURIES FROM "eventHarm" as e ')
distinctPD <- sqldf('SELECT DISTINCT e.PROPDMG FROM "eventHarm" as e ')
distinctPDE <- sqldf('SELECT DISTINCT e.PROPDMGEXP FROM "eventHarm" as e ORDER BY e.PROPDMGEXP')
distinctCD <- sqldf('SELECT DISTINCT e.CROPDMG FROM "eventHarm" as e ')
distinctCDE <- sqldf('SELECT DISTINCT e.CROPDMGEXP FROM "eventHarm" as e ')
columns=c("","0","1","2","3","4","5","6","7","8","9","k","K","m","M","b","B")
values=c(1,1,10,100,1000,10000,1e+05,1e+06,1e+07,1e+08,1e+09,1e+03,1e+03,1e+06,1e+06,1e+09,1e+09)
tb <- data.frame(columns = columns, values = values)
valMngAtExp <- function(x)
tryCatch(
if ( any( tb[tb$columns,1]==x)){
tb[tb$columns==x,2]
}else{
0}
,error= function(e){
#sprintf("%s", e)
})
lapply3 <- function(x, y, f, ...) {
out <- vector("list", length(x))
for (i in sample(seq_along(x))) {
out[[i]] <- y[i]*f(x[[i]], ...)
}
out
}
eventHarm$PROPDMGVAL=lapply3(eventHarm$PROPDMGEXP,eventHarm$PROPDMG,valMngAtExp)
eventHarm$CROPDMGVAL=lapply3(eventHarm$CROPDMGEXP,eventHarm$CROPDMG,valMngAtExp)
head(eventHarm)
eventHarm$PROPDMGVAL[1:10]
head(eventHarm)
eventHarm$CROPDMGVAL[eventHarm$CROPDMGVAL!=0]
head(eventHarm)
fatal <- aggregate(FATALITIES ~ EVTYPE, data = eventHarm, FUN = sum)
injury <- aggregate(INJURIES ~ EVTYPE, data = eventHarm, FUN = sum)
propdmg <- aggregate(PROPDMGVAL ~ EVTYPE, data = eventHarm, FUN = sum)
cropdmg <- aggregate(CROPDMGVAL ~ EVTYPE, data = eventHarm, FUN = sum)
class(eventHarm$FATALITIES)
class(eventHarm$EVTYPE)
class(eventHarm$CROPDMGVAL)
eventHarm$CROPDMGVAL[1]
class(as.matrix(eventHarm$CROPDMGVAL)
)
class(as.character(eventHarm$CROPDMGVAL))
as.character(eventHarm$CROPDMGVAL[1])
propdmg <- aggregate(as.integer(PROPDMGVAL) ~ EVTYPE, data = eventHarm, FUN = sum)
cropdmg <- aggregate(as.integer(CROPDMGVAL) ~ EVTYPE, data = eventHarm, FUN = sum)
cropdmg <- aggregate(as.numeric(CROPDMGVAL) ~ EVTYPE, data = eventHarm, FUN = sum)
propdmg <- aggregate(as.numeric(PROPDMGVAL) ~ EVTYPE, data = eventHarm, FUN = sum)
propdmg10 <- propdmg[order(-propdmg$PROPDMGVAL), ][1:10, ]
propdmg10 <- propdmg[order(propdmg$PROPDMGVAL), ][1:10, ]
propdmg[1:10]
propdmg$PROPDMGVAL[1:10]
eventHarm$PROPDMGVAL=as.numeric(lapply3(eventHarm$PROPDMGEXP,eventHarm$PROPDMG,valMngAtExp))
a=order(unique(eventHarm$PROPDMGVAL))
a
propdmg <- aggregate(PROPDMGVAL ~ EVTYPE, data = eventHarm, FUN = sum)
propdmg$PROPDMGVAL[1:10]
propdmg10 <- propdmg[order(propdmg$PROPDMGVAL), ][1:10, ]
propdmg10
propdmg10 <- propdmg[order(-propdmg$PROPDMGVAL), ][1:10, ]
propdmg10
fatalities <- aggregate(FATALITIES ~ EVTYPE, data = eventHarm, FUN = sum)
injuries <- aggregate(INJURIES ~ EVTYPE, data = eventHarm, FUN = sum)
damages <- aggregate(PROPDMGVAL ~ EVTYPE, data = eventHarm, FUN = sum)
crops_damages <- aggregate(CROPDMGVAL ~ EVTYPE, data = eventHarm, FUN = sum)
eventHarm$CROPDMGVAL=as.numeric(lapply3(eventHarm$CROPDMGEXP,eventHarm$CROPDMG,valMngAtExp))
crops_damages <- aggregate(CROPDMGVAL ~ EVTYPE, data = eventHarm, FUN = sum)
_10fatalities = fatalities[order(-fatalities$FATALITIES), ][1:10, ]
10fatalities = fatalities[order(-fatalities$FATALITIES), ][1:10, ]
fatalities_10 = fatalities[order(-fatalities$FATALITIES), ][1:10, ]
fatalities_10
injuries_10= injuries[order(-injuries$INJURIES), ][1:10, ]
injuries_10
damages_10 = damages[order(-damages$PROPDMGVAL), ][1:10, ]
damages_10
crops_damages_10 = crops_damages[order(-crops_damages$CROPDMGVAL), ][1:10, ]
crops_damages_10
barplot(fatalities$FATALITIES, names.arg = fatalities_10$EVTYPE,
main = "Top 10 Greatest Damages' events", ylab = "fatalities in number")
barplot(fatalities$FATALITIES, las = 3, names.arg = fatalities_10$EVTYPE,
main = "Top 10 Greatest Damages' events", ylab = "fatalities in number")
barplot(fatalities$FATALITIES, las = 3, names.arg = fatalities_10$EVTYPE,
main = "Top 10 Greatest Damages' events", ylab = "fatalities in number")
barplot(fatalities_10$FATALITIES, las = 3, names.arg = fatalities_10$EVTYPE,
main = "Top 10 Greatest Damages' events", ylab = "fatalities in number")
barplot(fatalities_10$FATALITIES, names.arg = fatalities_10$EVTYPE,
main = "Top 10 Greatest Damages' events", ylab = "fatalities in number")
barplot(fatalities_10$FATALITIES, las = 3, names.arg = fatalities_10$EVTYPE,
main = "Top 10 Greatest Damages' events", ylab = "fatalities in number")
barplot(injuries_10$injuries, las = 3, names.arg = injuries_10$EVTYPE,
main = "Top 10 Greatest Damages' events", ylab = "injuries in number")
injuries_10= injuries[order(-injuries$INJURIES), ][1:10, ]
injuries_10
barplot(injuries_10$injuries, las = 3, names.arg = injuries_10$EVTYPE,
main = "Top 10 Greatest Damages' events", ylab = "injuries in number")
barplot(injuries_10$INJURIES, las = 3, names.arg = injuries_10$EVTYPE,
main = "Top 10 Greatest Damages' events", ylab = "injuries in number")
par(mfrow = c(1, 2))
barplot(fatalities_10$FATALITIES, las = 3, names.arg = fatalities_10$EVTYPE,
main = "Top 10 Greatest Damages' events", ylab = "fatalities in number")
barplot(injuries_10$INJURIES, las = 3, names.arg = injuries_10$EVTYPE,
main = "Top 10 Greatest Damages' events", ylab = "injuries in number")
par(mfrow = c(1, 2))
barplot(damages_10$PROPDMGVAL, las = 3, names.arg = damages_10$EVTYPE,
main = "Top 10 Greatest Damages' events", ylab = "Cost of Damages")
barplot(crops_damages_10$CROPDMGVAL, las = 3, names.arg = crops_damages_10$EVTYPE,
main = "Top 10 Greatest Damages' events", ylab = "Cost of Damages")
par(mfrow = c(1, 2))
barplot(fatalities_10$FATALITIES, las = 3, names.arg = fatalities_10$EVTYPE,
main = "Top 10 Greatest Fatalities' events", ylab = "fatalities in number")
barplot(injuries_10$INJURIES, las = 3, names.arg = injuries_10$EVTYPE,
main = "Top 10 Greatest Injuries' events", ylab = "injuries in number")
par(mfrow = c(1, 2))
barplot(damages_10$PROPDMGVAL, las = 3, names.arg = damages_10$EVTYPE,
main = "Top 10 Greatest Damages' events", ylab = "Cost of Damages")
barplot(crops_damages_10$CROPDMGVAL, las = 3, names.arg = crops_damages_10$EVTYPE,
main = "Top 10 Greatest Damages' events", ylab = "Cost of Damages")
